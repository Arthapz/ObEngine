{
  "name": "MeltingSagaEngine",
  "tagline": "2D Platformer with a lot of RPG elements made with C++ and SFML !",
  "body": "# Melting Saga Engine\r\n\r\n## What the hell is Melting Saga Engine ?\r\nMelting Saga Engine (MSE is shorter) is a 2D Game Engine made on the top of SFML !\r\n\r\n## What do I need to build it ?\r\nYou will need several libs :\r\n- [SFML 2.3](http://www.sfml-dev.org/download/sfml/2.3/index-fr.php) (Display, Keys, Network, and much more)\r\n- [Kaguya](https://github.com/satoren/kaguya) (Lua Binding)\r\n- [Lua 5.3](http://lua-users.org/wiki/LuaBinaries) (Scripting language)\r\n- [ClipperLib](https://sourceforge.net/projects/polyclipping/files/) (Polygonal Intersection Resolution)\r\n\r\n## Could you give an example of what I can do with your engine ?\r\nWell, you can do approximatively everything with it as long as it's in 2D. MSE doesn't handle 3D.\r\nYou can do some Platformers, RPGs, 2D racing games, Visual Novels, Roguelikes, Metroidvanias, etc..\r\n\r\n## Is it free ?\r\nOf course, you can even sell your game made with the engine, no royalties (If you want to give us some money it's okay though).\r\nYou can also modify the sources.\r\nThere's no need to write somewhere that your game is made with MSE (but it's nice if you do it !)\r\n\r\n## Give me some interesting features\r\nHere you go :\r\n- Neat map editor (With a grid for precise map edition)\r\n- Spritesheet animations (with tiny animation language)\r\n- Skeletal animations (Planned)\r\n- Light system\r\n- Particles\r\n- Normal maps (Planned)\r\n- Lua scripting (Object oriented with a full events system)\r\n- Object-oriented\r\n- VisualNovel system included\r\n- Infinite amount of layers with optional parallax\r\n- Mathematical expressions parsing\r\n- Home-made data language\r\n- Polygonal Collisions with full collision detection support\r\n- Developpement console with coloration and scripting support\r\n- Customizable cursor (whoa)\r\n- Serial and Network events support\r\n- Trajectory system (and you can even create your owns)\r\n- DeltaTime handling\r\n\r\n## Right, can I have several object scripting examples now ?\r\nSure, here are some simple objects :\r\n### Examples using console :\r\n#### Hello-World object\r\nThis one is really simple, it just prints \"Hello World\" in the console (not the game console)\r\n```lua\r\nThis:useLocalTrigger(\"Init\"); -- Tells the engine that this object will execute Local.Init when created\r\n\r\nfunction Local.Init() -- Called when object is created\r\n  print(\"Hello World\");\r\nend\r\n```\r\n#### Hello-World in game console\r\nDoes exactly the same thing than the first one except that it prints \"Hello World\" in the game console (F1 to open console)\r\n```lua\r\nImport(\"Core.Console\") -- Import Console API from C++\r\n\r\nGetHook(\"Console\"); -- Place the Game's Console pointer in Hook.Console\r\n\r\nThis:useLocalTrigger(\"Init\");\r\n\r\nfunction Local.Init()\r\n  -- Create a new stream for the console named \"HelloWorld\", the \"true\" means the stream is directly enabled\r\n  local consoleStream = Hook.Console:createStream(\"HelloWorld\", true);\r\n  -- Write \"Hello World\" in the game console in red using the stream (5th parameter is alpha)\r\n  consoleStream:write(\"Hello World\", 255, 0, 0, 255);\r\nend\r\n```\r\n\r\n#### Rainbow Hello-World\r\nSame thing that the one before except that we will change the color of the text at every frame !\r\n```lua\r\nImport(\"Core.Console\");\r\n\r\nGetHook(\"Console\");\r\n\r\nmath.randomseed(os.time()); -- Random seed for when we'll use math.random()\r\n\r\nThis:useLocalTrigger(\"Init\");\r\nThis:useLocalTrigger(\"Update\"); Tells the engine that this object will execute Local.Update every frame\r\n\r\nfunction Local.Init()\r\n  local consoleStream = Hook.Console:createStream(\"HelloWorld\", true);\r\n  -- We start with the white color (255, 255, 255), the line is stored in helloWorldMessage\r\n  helloWorldMessage = consoleStream:write(\"Hello World Rainbow !\", 255, 255, 255, 255);\r\nend\r\n\r\nfunction Local.Update() -- This will be called at every frame\r\n  local r = math.random(0, 255); -- Red composant\r\n  local g = math.random(0, 255); -- Green composant\r\n  local b = math.random(0, 255); -- Blue composant\r\n  helloWorldMessage:setColor(r, g, b); -- Change the color of the whole line\r\nend\r\n```\r\n### Examples with LevelSprites\r\nEvery LevelObject can have a LevelSprite associated (it's cooler when your object appears in the game right ?).\r\n#### Rotating goat\r\nLet's imagine you want to create a rotating goat in your game, no problem :\r\n```lua\r\nImport(\"Core.LevelSprite\"); -- C++ API for LevelSprites\r\nImport(\"Core.Animation.Animator\"); -- C++ API for Animations (but just the Animator)\r\n\r\nThis:useLocalTrigger(\"Init\");\r\nThis:useLocalTrigger(\"Update\");\r\n\r\nfunction Local.Init()\r\n  -- Set the animation for when the goat is flying to the right (You can imagine it already right ?)\r\n  This:Animator():setKey(\"GOAT_FLYING_LEFT\");\r\n  This:setInitialised(true); -- You need this line for every object that is visible in-game\r\nend\r\n\r\nfunction Local.Update(P) -- P is a table that contains every events parameters (here parameters for update)\r\n  This:LevelSprite():rotate(P.dt * 45); -- Rotate of 45 degrees each second (You multiply with the DeltaTime here)\r\nend\r\n```\r\n\r\n### Examples with Colliders\r\nEvery LevelObject can also have a Collider (solid or not).\r\n\r\n#### A simple door\r\nThis is a simple door that you can open or close when you click it\r\n\r\n```lua\r\nDoor = {} -- You create a table to place Door's function in\r\n\r\nImport(\"Core.Animation.Animator\");\r\nImport(\"Core.Collision\");\r\n\r\nThis:useLocalTrigger(\"Init\");\r\n-- Tells the engine that this object will execute Local.Click everytime the Collider is clicked\r\nThis:useLocalTrigger(\"Click\");\r\n\r\nfunction Local.Init()\r\n    This:Animator():setKey(\"Close\");\r\n    opened = false;\r\n    This:setInitialised(true);\r\nend\r\n\r\nfunction Door.Open()\r\n    This:Animator():setKey(\"Open\");\r\n    This:Collider():setSolid(false); -- Makes the character able to pass through the door\r\n    opened = true;\r\nend\r\n\r\nfunction Door.Close()\r\n    This:Animator():setKey(\"Close\");\r\n    This:Collider():setSolid(true); -- Makes the collider solid (no one can pass through)\r\n    opened = false;\r\nend\r\n\r\nfunction Local.Click() -- Called when the object's collider is clicked\r\n    if opened then Door.Close();\r\n    else Door.Open();\r\n    end\r\nend\r\n```\r\n\r\nOfficial website : https://www.meltingsaga.xyz\r\nPlease check https://www.meltingsaga.xyz/doc for some documentation.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}